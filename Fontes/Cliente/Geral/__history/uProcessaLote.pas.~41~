unit uProcessaLote;

interface

uses
  System.Classes, uClasses, SysUtils, uMethods, udmConexao, rest.Json;

type
  TProcessarLoteThread = class(TThread)
  private
    FAtivo: Boolean;
    FArquivo: TStringList;
    FIndexInicial: Integer;
    FIndexFinal: Integer;
    FQuantidade: Integer;
  protected
    procedure Execute; override;
  public
    constructor Create;
    property Ativo: Boolean read FAtivo write FAtivo;
    property Arquivo: TStringList read FArquivo write FArquivo;
    property IndexInicial: Integer read FIndexInicial write FIndexInicial;
    property IndexFinal: Integer read FIndexFinal write FIndexFinal;
    property Quantidade: Integer read FQuantidade write FQuantidade;
  end;


implementation

{ TProcessarLoteThread }

constructor TProcessarLoteThread.Create;
begin
  inherited Create(True);
  Ativo := True;
end;

procedure TProcessarLoteThread.Execute;
var
  IndexAtual, I: Integer;
  Methods: TdmCadPessoaClient;
  TextoEnvio: TStringList;
begin
  inherited;
  try
    Methods := TdmCadPessoaClient.Create(dmConexao.rConexao);
    Quantidade := 0;
    TextoEnvio := TStringList.Create;
    for IndexAtual := IndexInicial to IndexFinal do
    begin
      TextoEnvio.Add(Arquivo[IndexAtual]);
      Quantidade := Quantidade +1;
    end;
    Methods.updateProcessarDados(TextoEnvio.Text);
  finally
    Methods.Free;
    Ativo := False;
  end;
end;


end.
