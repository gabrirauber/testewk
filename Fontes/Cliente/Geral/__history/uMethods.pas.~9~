//
// Created by the DataSnap proxy generator.
// 29/09/2024 11:44:48
//

unit uMethods;

interface

uses System.JSON, Datasnap.DSProxyRest, Datasnap.DSClientRest, Data.DBXCommon, Data.DBXClient, Data.DBXDataSnap, Data.DBXJSON, Datasnap.DSProxy, System.Classes, System.SysUtils, Data.DB, Data.SqlExpr, Data.DBXDBReaders, Data.DBXCDSReaders, Data.FireDACJSONReflect, Data.DBXJSONReflect;

type

  IDSRestCachedTFDJSONDataSets = interface;

  TDMBaseClient = class(TDSAdminRestClient)
  private
    FDataModuleCreateCommand: TDSRestCommand;
    FCorrigirTFDQueryCommand: TDSRestCommand;
    FGetDataHoraServidorCommand: TDSRestCommand;
  public
    constructor Create(ARestConnection: TDSRestConnection); overload;
    constructor Create(ARestConnection: TDSRestConnection; AInstanceOwner: Boolean); overload;
    destructor Destroy; override;
    procedure DataModuleCreate(Sender: TObject);
    procedure CorrigirTFDQuery;
    function GetDataHoraServidor(const ARequestFilter: string = ''): Double;
  end;

  TdmBaseCadastroClient = class(TDSAdminRestClient)
  private
    FRetornaCadatroCommand: TDSRestCommand;
    FRetornaCadatroCommand_Cache: TDSRestCommand;
    FRetornaCadastrosCommand: TDSRestCommand;
    FRetornaCadastrosCommand_Cache: TDSRestCommand;
    FupdateReqInserirDadosCommand: TDSRestCommand;
    FupdateReqAlterarDadosCommand: TDSRestCommand;
    FupdateReqExcluirDadosCommand: TDSRestCommand;
    FDataModuleCreateCommand: TDSRestCommand;
    FCorrigirTFDQueryCommand: TDSRestCommand;
    FGetDataHoraServidorCommand: TDSRestCommand;
  public
    constructor Create(ARestConnection: TDSRestConnection); overload;
    constructor Create(ARestConnection: TDSRestConnection; AInstanceOwner: Boolean); overload;
    destructor Destroy; override;
    function RetornaCadatro(ID: Integer; const ARequestFilter: string = ''): TFDJSONDataSets;
    function RetornaCadatro_Cache(ID: Integer; const ARequestFilter: string = ''): IDSRestCachedTFDJSONDataSets;
    function RetornaCadastros(Where: string; const ARequestFilter: string = ''): TFDJSONDataSets;
    function RetornaCadastros_Cache(Where: string; const ARequestFilter: string = ''): IDSRestCachedTFDJSONDataSets;
    function updateReqInserirDados(Json: string; const ARequestFilter: string = ''): Boolean;
    function updateReqAlterarDados(Json: string; const ARequestFilter: string = ''): Boolean;
    function updateReqExcluirDados(Json: string; const ARequestFilter: string = ''): Boolean;
    procedure DataModuleCreate(Sender: TObject);
    procedure CorrigirTFDQuery;
    function GetDataHoraServidor(const ARequestFilter: string = ''): Double;
  end;

  TdmBaseConsultaClient = class(TDSAdminRestClient)
  private
    FRetornaDadosConsultaCommand: TDSRestCommand;
    FDataModuleCreateCommand: TDSRestCommand;
    FCorrigirTFDQueryCommand: TDSRestCommand;
    FGetDataHoraServidorCommand: TDSRestCommand;
  public
    constructor Create(ARestConnection: TDSRestConnection); overload;
    constructor Create(ARestConnection: TDSRestConnection; AInstanceOwner: Boolean); overload;
    destructor Destroy; override;
    function RetornaDadosConsulta(Filtro: string; const ARequestFilter: string = ''): string;
    procedure DataModuleCreate(Sender: TObject);
    procedure CorrigirTFDQuery;
    function GetDataHoraServidor(const ARequestFilter: string = ''): Double;
  end;

  TdmCadPedidoVendaClient = class(TDSAdminRestClient)
  private
    FRetornaNomeClienteCommand: TDSRestCommand;
    FRetornaCadatroCommand: TDSRestCommand;
    FRetornaCadatroCommand_Cache: TDSRestCommand;
    FRetornaCadastrosCommand: TDSRestCommand;
    FRetornaCadastrosCommand_Cache: TDSRestCommand;
    FupdateReqInserirDadosCommand: TDSRestCommand;
    FupdateReqAlterarDadosCommand: TDSRestCommand;
    FupdateReqExcluirDadosCommand: TDSRestCommand;
    FDataModuleCreateCommand: TDSRestCommand;
    FCorrigirTFDQueryCommand: TDSRestCommand;
    FGetDataHoraServidorCommand: TDSRestCommand;
  public
    constructor Create(ARestConnection: TDSRestConnection); overload;
    constructor Create(ARestConnection: TDSRestConnection; AInstanceOwner: Boolean); overload;
    destructor Destroy; override;
    function RetornaNomeCliente(ID: Integer; const ARequestFilter: string = ''): string;
    function RetornaCadatro(ID: Integer; const ARequestFilter: string = ''): TFDJSONDataSets;
    function RetornaCadatro_Cache(ID: Integer; const ARequestFilter: string = ''): IDSRestCachedTFDJSONDataSets;
    function RetornaCadastros(Where: string; const ARequestFilter: string = ''): TFDJSONDataSets;
    function RetornaCadastros_Cache(Where: string; const ARequestFilter: string = ''): IDSRestCachedTFDJSONDataSets;
    function updateReqInserirDados(Json: string; const ARequestFilter: string = ''): Boolean;
    function updateReqAlterarDados(Json: string; const ARequestFilter: string = ''): Boolean;
    function updateReqExcluirDados(Json: string; const ARequestFilter: string = ''): Boolean;
    procedure DataModuleCreate(Sender: TObject);
    procedure CorrigirTFDQuery;
    function GetDataHoraServidor(const ARequestFilter: string = ''): Double;
  end;

  TdmConsultaClienteClient = class(TDSAdminRestClient)
  private
    FRetornaDadosConsultaCommand: TDSRestCommand;
    FDataModuleCreateCommand: TDSRestCommand;
    FCorrigirTFDQueryCommand: TDSRestCommand;
    FGetDataHoraServidorCommand: TDSRestCommand;
  public
    constructor Create(ARestConnection: TDSRestConnection); overload;
    constructor Create(ARestConnection: TDSRestConnection; AInstanceOwner: Boolean); overload;
    destructor Destroy; override;
    function RetornaDadosConsulta(Filtro: string; const ARequestFilter: string = ''): string;
    procedure DataModuleCreate(Sender: TObject);
    procedure CorrigirTFDQuery;
    function GetDataHoraServidor(const ARequestFilter: string = ''): Double;
  end;

  TdmConsultaProdutoClient = class(TDSAdminRestClient)
  private
    FRetornaDadosConsultaCommand: TDSRestCommand;
    FDataModuleCreateCommand: TDSRestCommand;
    FCorrigirTFDQueryCommand: TDSRestCommand;
    FGetDataHoraServidorCommand: TDSRestCommand;
  public
    constructor Create(ARestConnection: TDSRestConnection); overload;
    constructor Create(ARestConnection: TDSRestConnection; AInstanceOwner: Boolean); overload;
    destructor Destroy; override;
    function RetornaDadosConsulta(Filtro: string; const ARequestFilter: string = ''): string;
    procedure DataModuleCreate(Sender: TObject);
    procedure CorrigirTFDQuery;
    function GetDataHoraServidor(const ARequestFilter: string = ''): Double;
  end;

  TdmInserirProdutoClient = class(TDSAdminRestClient)
  private
    FRetornaNomeProdutoCommand: TDSRestCommand;
    FDataModuleCreateCommand: TDSRestCommand;
    FCorrigirTFDQueryCommand: TDSRestCommand;
    FGetDataHoraServidorCommand: TDSRestCommand;
  public
    constructor Create(ARestConnection: TDSRestConnection); overload;
    constructor Create(ARestConnection: TDSRestConnection; AInstanceOwner: Boolean); overload;
    destructor Destroy; override;
    function RetornaNomeProduto(ID: Integer; const ARequestFilter: string = ''): string;
    procedure DataModuleCreate(Sender: TObject);
    procedure CorrigirTFDQuery;
    function GetDataHoraServidor(const ARequestFilter: string = ''): Double;
  end;

  IDSRestCachedTFDJSONDataSets = interface(IDSRestCachedObject<TFDJSONDataSets>)
  end;

  TDSRestCachedTFDJSONDataSets = class(TDSRestCachedObject<TFDJSONDataSets>, IDSRestCachedTFDJSONDataSets, IDSRestCachedCommand)
  end;

const
  TDMBase_DataModuleCreate: array [0..0] of TDSRestParameterMetaData =
  (
    (Name: 'Sender'; Direction: 1; DBXType: 37; TypeName: 'TObject')
  );

  TDMBase_GetDataHoraServidor: array [0..0] of TDSRestParameterMetaData =
  (
    (Name: ''; Direction: 4; DBXType: 7; TypeName: 'Double')
  );

  TdmBaseCadastro_RetornaCadatro: array [0..1] of TDSRestParameterMetaData =
  (
    (Name: 'ID'; Direction: 1; DBXType: 6; TypeName: 'Integer'),
    (Name: ''; Direction: 4; DBXType: 37; TypeName: 'TFDJSONDataSets')
  );

  TdmBaseCadastro_RetornaCadatro_Cache: array [0..1] of TDSRestParameterMetaData =
  (
    (Name: 'ID'; Direction: 1; DBXType: 6; TypeName: 'Integer'),
    (Name: ''; Direction: 4; DBXType: 26; TypeName: 'String')
  );

  TdmBaseCadastro_RetornaCadastros: array [0..1] of TDSRestParameterMetaData =
  (
    (Name: 'Where'; Direction: 1; DBXType: 26; TypeName: 'string'),
    (Name: ''; Direction: 4; DBXType: 37; TypeName: 'TFDJSONDataSets')
  );

  TdmBaseCadastro_RetornaCadastros_Cache: array [0..1] of TDSRestParameterMetaData =
  (
    (Name: 'Where'; Direction: 1; DBXType: 26; TypeName: 'string'),
    (Name: ''; Direction: 4; DBXType: 26; TypeName: 'String')
  );

  TdmBaseCadastro_updateReqInserirDados: array [0..1] of TDSRestParameterMetaData =
  (
    (Name: 'Json'; Direction: 1; DBXType: 26; TypeName: 'string'),
    (Name: ''; Direction: 4; DBXType: 4; TypeName: 'Boolean')
  );

  TdmBaseCadastro_updateReqAlterarDados: array [0..1] of TDSRestParameterMetaData =
  (
    (Name: 'Json'; Direction: 1; DBXType: 26; TypeName: 'string'),
    (Name: ''; Direction: 4; DBXType: 4; TypeName: 'Boolean')
  );

  TdmBaseCadastro_updateReqExcluirDados: array [0..1] of TDSRestParameterMetaData =
  (
    (Name: 'Json'; Direction: 1; DBXType: 26; TypeName: 'string'),
    (Name: ''; Direction: 4; DBXType: 4; TypeName: 'Boolean')
  );

  TdmBaseCadastro_DataModuleCreate: array [0..0] of TDSRestParameterMetaData =
  (
    (Name: 'Sender'; Direction: 1; DBXType: 37; TypeName: 'TObject')
  );

  TdmBaseCadastro_GetDataHoraServidor: array [0..0] of TDSRestParameterMetaData =
  (
    (Name: ''; Direction: 4; DBXType: 7; TypeName: 'Double')
  );

  TdmBaseConsulta_RetornaDadosConsulta: array [0..1] of TDSRestParameterMetaData =
  (
    (Name: 'Filtro'; Direction: 1; DBXType: 26; TypeName: 'string'),
    (Name: ''; Direction: 4; DBXType: 26; TypeName: 'string')
  );

  TdmBaseConsulta_DataModuleCreate: array [0..0] of TDSRestParameterMetaData =
  (
    (Name: 'Sender'; Direction: 1; DBXType: 37; TypeName: 'TObject')
  );

  TdmBaseConsulta_GetDataHoraServidor: array [0..0] of TDSRestParameterMetaData =
  (
    (Name: ''; Direction: 4; DBXType: 7; TypeName: 'Double')
  );

  TdmCadPedidoVenda_RetornaNomeCliente: array [0..1] of TDSRestParameterMetaData =
  (
    (Name: 'ID'; Direction: 1; DBXType: 6; TypeName: 'Integer'),
    (Name: ''; Direction: 4; DBXType: 26; TypeName: 'string')
  );

  TdmCadPedidoVenda_RetornaCadatro: array [0..1] of TDSRestParameterMetaData =
  (
    (Name: 'ID'; Direction: 1; DBXType: 6; TypeName: 'Integer'),
    (Name: ''; Direction: 4; DBXType: 37; TypeName: 'TFDJSONDataSets')
  );

  TdmCadPedidoVenda_RetornaCadatro_Cache: array [0..1] of TDSRestParameterMetaData =
  (
    (Name: 'ID'; Direction: 1; DBXType: 6; TypeName: 'Integer'),
    (Name: ''; Direction: 4; DBXType: 26; TypeName: 'String')
  );

  TdmCadPedidoVenda_RetornaCadastros: array [0..1] of TDSRestParameterMetaData =
  (
    (Name: 'Where'; Direction: 1; DBXType: 26; TypeName: 'string'),
    (Name: ''; Direction: 4; DBXType: 37; TypeName: 'TFDJSONDataSets')
  );

  TdmCadPedidoVenda_RetornaCadastros_Cache: array [0..1] of TDSRestParameterMetaData =
  (
    (Name: 'Where'; Direction: 1; DBXType: 26; TypeName: 'string'),
    (Name: ''; Direction: 4; DBXType: 26; TypeName: 'String')
  );

  TdmCadPedidoVenda_updateReqInserirDados: array [0..1] of TDSRestParameterMetaData =
  (
    (Name: 'Json'; Direction: 1; DBXType: 26; TypeName: 'string'),
    (Name: ''; Direction: 4; DBXType: 4; TypeName: 'Boolean')
  );

  TdmCadPedidoVenda_updateReqAlterarDados: array [0..1] of TDSRestParameterMetaData =
  (
    (Name: 'Json'; Direction: 1; DBXType: 26; TypeName: 'string'),
    (Name: ''; Direction: 4; DBXType: 4; TypeName: 'Boolean')
  );

  TdmCadPedidoVenda_updateReqExcluirDados: array [0..1] of TDSRestParameterMetaData =
  (
    (Name: 'Json'; Direction: 1; DBXType: 26; TypeName: 'string'),
    (Name: ''; Direction: 4; DBXType: 4; TypeName: 'Boolean')
  );

  TdmCadPedidoVenda_DataModuleCreate: array [0..0] of TDSRestParameterMetaData =
  (
    (Name: 'Sender'; Direction: 1; DBXType: 37; TypeName: 'TObject')
  );

  TdmCadPedidoVenda_GetDataHoraServidor: array [0..0] of TDSRestParameterMetaData =
  (
    (Name: ''; Direction: 4; DBXType: 7; TypeName: 'Double')
  );

  TdmConsultaCliente_RetornaDadosConsulta: array [0..1] of TDSRestParameterMetaData =
  (
    (Name: 'Filtro'; Direction: 1; DBXType: 26; TypeName: 'string'),
    (Name: ''; Direction: 4; DBXType: 26; TypeName: 'string')
  );

  TdmConsultaCliente_DataModuleCreate: array [0..0] of TDSRestParameterMetaData =
  (
    (Name: 'Sender'; Direction: 1; DBXType: 37; TypeName: 'TObject')
  );

  TdmConsultaCliente_GetDataHoraServidor: array [0..0] of TDSRestParameterMetaData =
  (
    (Name: ''; Direction: 4; DBXType: 7; TypeName: 'Double')
  );

  TdmConsultaProduto_RetornaDadosConsulta: array [0..1] of TDSRestParameterMetaData =
  (
    (Name: 'Filtro'; Direction: 1; DBXType: 26; TypeName: 'string'),
    (Name: ''; Direction: 4; DBXType: 26; TypeName: 'string')
  );

  TdmConsultaProduto_DataModuleCreate: array [0..0] of TDSRestParameterMetaData =
  (
    (Name: 'Sender'; Direction: 1; DBXType: 37; TypeName: 'TObject')
  );

  TdmConsultaProduto_GetDataHoraServidor: array [0..0] of TDSRestParameterMetaData =
  (
    (Name: ''; Direction: 4; DBXType: 7; TypeName: 'Double')
  );

  TdmInserirProduto_RetornaNomeProduto: array [0..1] of TDSRestParameterMetaData =
  (
    (Name: 'ID'; Direction: 1; DBXType: 6; TypeName: 'Integer'),
    (Name: ''; Direction: 4; DBXType: 26; TypeName: 'string')
  );

  TdmInserirProduto_DataModuleCreate: array [0..0] of TDSRestParameterMetaData =
  (
    (Name: 'Sender'; Direction: 1; DBXType: 37; TypeName: 'TObject')
  );

  TdmInserirProduto_GetDataHoraServidor: array [0..0] of TDSRestParameterMetaData =
  (
    (Name: ''; Direction: 4; DBXType: 7; TypeName: 'Double')
  );

implementation

procedure TDMBaseClient.DataModuleCreate(Sender: TObject);
begin
  if FDataModuleCreateCommand = nil then
  begin
    FDataModuleCreateCommand := FConnection.CreateCommand;
    FDataModuleCreateCommand.RequestType := 'POST';
    FDataModuleCreateCommand.Text := 'TDMBase."DataModuleCreate"';
    FDataModuleCreateCommand.Prepare(TDMBase_DataModuleCreate);
  end;
  if not Assigned(Sender) then
    FDataModuleCreateCommand.Parameters[0].Value.SetNull
  else
  begin
    FMarshal := TDSRestCommand(FDataModuleCreateCommand.Parameters[0].ConnectionHandler).GetJSONMarshaler;
    try
      FDataModuleCreateCommand.Parameters[0].Value.SetJSONValue(FMarshal.Marshal(Sender), True);
      if FInstanceOwner then
        Sender.Free
    finally
      FreeAndNil(FMarshal)
    end
    end;
  FDataModuleCreateCommand.Execute;
end;

procedure TDMBaseClient.CorrigirTFDQuery;
begin
  if FCorrigirTFDQueryCommand = nil then
  begin
    FCorrigirTFDQueryCommand := FConnection.CreateCommand;
    FCorrigirTFDQueryCommand.RequestType := 'GET';
    FCorrigirTFDQueryCommand.Text := 'TDMBase.CorrigirTFDQuery';
  end;
  FCorrigirTFDQueryCommand.Execute;
end;

function TDMBaseClient.GetDataHoraServidor(const ARequestFilter: string): Double;
begin
  if FGetDataHoraServidorCommand = nil then
  begin
    FGetDataHoraServidorCommand := FConnection.CreateCommand;
    FGetDataHoraServidorCommand.RequestType := 'GET';
    FGetDataHoraServidorCommand.Text := 'TDMBase.GetDataHoraServidor';
    FGetDataHoraServidorCommand.Prepare(TDMBase_GetDataHoraServidor);
  end;
  FGetDataHoraServidorCommand.Execute(ARequestFilter);
  Result := FGetDataHoraServidorCommand.Parameters[0].Value.GetDouble;
end;

constructor TDMBaseClient.Create(ARestConnection: TDSRestConnection);
begin
  inherited Create(ARestConnection);
end;

constructor TDMBaseClient.Create(ARestConnection: TDSRestConnection; AInstanceOwner: Boolean);
begin
  inherited Create(ARestConnection, AInstanceOwner);
end;

destructor TDMBaseClient.Destroy;
begin
  FDataModuleCreateCommand.DisposeOf;
  FCorrigirTFDQueryCommand.DisposeOf;
  FGetDataHoraServidorCommand.DisposeOf;
  inherited;
end;

function TdmBaseCadastroClient.RetornaCadatro(ID: Integer; const ARequestFilter: string): TFDJSONDataSets;
begin
  if FRetornaCadatroCommand = nil then
  begin
    FRetornaCadatroCommand := FConnection.CreateCommand;
    FRetornaCadatroCommand.RequestType := 'GET';
    FRetornaCadatroCommand.Text := 'TdmBaseCadastro.RetornaCadatro';
    FRetornaCadatroCommand.Prepare(TdmBaseCadastro_RetornaCadatro);
  end;
  FRetornaCadatroCommand.Parameters[0].Value.SetInt32(ID);
  FRetornaCadatroCommand.Execute(ARequestFilter);
  if not FRetornaCadatroCommand.Parameters[1].Value.IsNull then
  begin
    FUnMarshal := TDSRestCommand(FRetornaCadatroCommand.Parameters[1].ConnectionHandler).GetJSONUnMarshaler;
    try
      Result := TFDJSONDataSets(FUnMarshal.UnMarshal(FRetornaCadatroCommand.Parameters[1].Value.GetJSONValue(True)));
      if FInstanceOwner then
        FRetornaCadatroCommand.FreeOnExecute(Result);
    finally
      FreeAndNil(FUnMarshal)
    end
  end
  else
    Result := nil;
end;

function TdmBaseCadastroClient.RetornaCadatro_Cache(ID: Integer; const ARequestFilter: string): IDSRestCachedTFDJSONDataSets;
begin
  if FRetornaCadatroCommand_Cache = nil then
  begin
    FRetornaCadatroCommand_Cache := FConnection.CreateCommand;
    FRetornaCadatroCommand_Cache.RequestType := 'GET';
    FRetornaCadatroCommand_Cache.Text := 'TdmBaseCadastro.RetornaCadatro';
    FRetornaCadatroCommand_Cache.Prepare(TdmBaseCadastro_RetornaCadatro_Cache);
  end;
  FRetornaCadatroCommand_Cache.Parameters[0].Value.SetInt32(ID);
  FRetornaCadatroCommand_Cache.ExecuteCache(ARequestFilter);
  Result := TDSRestCachedTFDJSONDataSets.Create(FRetornaCadatroCommand_Cache.Parameters[1].Value.GetString);
end;

function TdmBaseCadastroClient.RetornaCadastros(Where: string; const ARequestFilter: string): TFDJSONDataSets;
begin
  if FRetornaCadastrosCommand = nil then
  begin
    FRetornaCadastrosCommand := FConnection.CreateCommand;
    FRetornaCadastrosCommand.RequestType := 'GET';
    FRetornaCadastrosCommand.Text := 'TdmBaseCadastro.RetornaCadastros';
    FRetornaCadastrosCommand.Prepare(TdmBaseCadastro_RetornaCadastros);
  end;
  FRetornaCadastrosCommand.Parameters[0].Value.SetWideString(Where);
  FRetornaCadastrosCommand.Execute(ARequestFilter);
  if not FRetornaCadastrosCommand.Parameters[1].Value.IsNull then
  begin
    FUnMarshal := TDSRestCommand(FRetornaCadastrosCommand.Parameters[1].ConnectionHandler).GetJSONUnMarshaler;
    try
      Result := TFDJSONDataSets(FUnMarshal.UnMarshal(FRetornaCadastrosCommand.Parameters[1].Value.GetJSONValue(True)));
      if FInstanceOwner then
        FRetornaCadastrosCommand.FreeOnExecute(Result);
    finally
      FreeAndNil(FUnMarshal)
    end
  end
  else
    Result := nil;
end;

function TdmBaseCadastroClient.RetornaCadastros_Cache(Where: string; const ARequestFilter: string): IDSRestCachedTFDJSONDataSets;
begin
  if FRetornaCadastrosCommand_Cache = nil then
  begin
    FRetornaCadastrosCommand_Cache := FConnection.CreateCommand;
    FRetornaCadastrosCommand_Cache.RequestType := 'GET';
    FRetornaCadastrosCommand_Cache.Text := 'TdmBaseCadastro.RetornaCadastros';
    FRetornaCadastrosCommand_Cache.Prepare(TdmBaseCadastro_RetornaCadastros_Cache);
  end;
  FRetornaCadastrosCommand_Cache.Parameters[0].Value.SetWideString(Where);
  FRetornaCadastrosCommand_Cache.ExecuteCache(ARequestFilter);
  Result := TDSRestCachedTFDJSONDataSets.Create(FRetornaCadastrosCommand_Cache.Parameters[1].Value.GetString);
end;

function TdmBaseCadastroClient.updateReqInserirDados(Json: string; const ARequestFilter: string): Boolean;
begin
  if FupdateReqInserirDadosCommand = nil then
  begin
    FupdateReqInserirDadosCommand := FConnection.CreateCommand;
    FupdateReqInserirDadosCommand.RequestType := 'GET';
    FupdateReqInserirDadosCommand.Text := 'TdmBaseCadastro.updateReqInserirDados';
    FupdateReqInserirDadosCommand.Prepare(TdmBaseCadastro_updateReqInserirDados);
  end;
  FupdateReqInserirDadosCommand.Parameters[0].Value.SetWideString(Json);
  FupdateReqInserirDadosCommand.Execute(ARequestFilter);
  Result := FupdateReqInserirDadosCommand.Parameters[1].Value.GetBoolean;
end;

function TdmBaseCadastroClient.updateReqAlterarDados(Json: string; const ARequestFilter: string): Boolean;
begin
  if FupdateReqAlterarDadosCommand = nil then
  begin
    FupdateReqAlterarDadosCommand := FConnection.CreateCommand;
    FupdateReqAlterarDadosCommand.RequestType := 'GET';
    FupdateReqAlterarDadosCommand.Text := 'TdmBaseCadastro.updateReqAlterarDados';
    FupdateReqAlterarDadosCommand.Prepare(TdmBaseCadastro_updateReqAlterarDados);
  end;
  FupdateReqAlterarDadosCommand.Parameters[0].Value.SetWideString(Json);
  FupdateReqAlterarDadosCommand.Execute(ARequestFilter);
  Result := FupdateReqAlterarDadosCommand.Parameters[1].Value.GetBoolean;
end;

function TdmBaseCadastroClient.updateReqExcluirDados(Json: string; const ARequestFilter: string): Boolean;
begin
  if FupdateReqExcluirDadosCommand = nil then
  begin
    FupdateReqExcluirDadosCommand := FConnection.CreateCommand;
    FupdateReqExcluirDadosCommand.RequestType := 'GET';
    FupdateReqExcluirDadosCommand.Text := 'TdmBaseCadastro.updateReqExcluirDados';
    FupdateReqExcluirDadosCommand.Prepare(TdmBaseCadastro_updateReqExcluirDados);
  end;
  FupdateReqExcluirDadosCommand.Parameters[0].Value.SetWideString(Json);
  FupdateReqExcluirDadosCommand.Execute(ARequestFilter);
  Result := FupdateReqExcluirDadosCommand.Parameters[1].Value.GetBoolean;
end;

procedure TdmBaseCadastroClient.DataModuleCreate(Sender: TObject);
begin
  if FDataModuleCreateCommand = nil then
  begin
    FDataModuleCreateCommand := FConnection.CreateCommand;
    FDataModuleCreateCommand.RequestType := 'POST';
    FDataModuleCreateCommand.Text := 'TdmBaseCadastro."DataModuleCreate"';
    FDataModuleCreateCommand.Prepare(TdmBaseCadastro_DataModuleCreate);
  end;
  if not Assigned(Sender) then
    FDataModuleCreateCommand.Parameters[0].Value.SetNull
  else
  begin
    FMarshal := TDSRestCommand(FDataModuleCreateCommand.Parameters[0].ConnectionHandler).GetJSONMarshaler;
    try
      FDataModuleCreateCommand.Parameters[0].Value.SetJSONValue(FMarshal.Marshal(Sender), True);
      if FInstanceOwner then
        Sender.Free
    finally
      FreeAndNil(FMarshal)
    end
    end;
  FDataModuleCreateCommand.Execute;
end;

procedure TdmBaseCadastroClient.CorrigirTFDQuery;
begin
  if FCorrigirTFDQueryCommand = nil then
  begin
    FCorrigirTFDQueryCommand := FConnection.CreateCommand;
    FCorrigirTFDQueryCommand.RequestType := 'GET';
    FCorrigirTFDQueryCommand.Text := 'TdmBaseCadastro.CorrigirTFDQuery';
  end;
  FCorrigirTFDQueryCommand.Execute;
end;

function TdmBaseCadastroClient.GetDataHoraServidor(const ARequestFilter: string): Double;
begin
  if FGetDataHoraServidorCommand = nil then
  begin
    FGetDataHoraServidorCommand := FConnection.CreateCommand;
    FGetDataHoraServidorCommand.RequestType := 'GET';
    FGetDataHoraServidorCommand.Text := 'TdmBaseCadastro.GetDataHoraServidor';
    FGetDataHoraServidorCommand.Prepare(TdmBaseCadastro_GetDataHoraServidor);
  end;
  FGetDataHoraServidorCommand.Execute(ARequestFilter);
  Result := FGetDataHoraServidorCommand.Parameters[0].Value.GetDouble;
end;

constructor TdmBaseCadastroClient.Create(ARestConnection: TDSRestConnection);
begin
  inherited Create(ARestConnection);
end;

constructor TdmBaseCadastroClient.Create(ARestConnection: TDSRestConnection; AInstanceOwner: Boolean);
begin
  inherited Create(ARestConnection, AInstanceOwner);
end;

destructor TdmBaseCadastroClient.Destroy;
begin
  FRetornaCadatroCommand.DisposeOf;
  FRetornaCadatroCommand_Cache.DisposeOf;
  FRetornaCadastrosCommand.DisposeOf;
  FRetornaCadastrosCommand_Cache.DisposeOf;
  FupdateReqInserirDadosCommand.DisposeOf;
  FupdateReqAlterarDadosCommand.DisposeOf;
  FupdateReqExcluirDadosCommand.DisposeOf;
  FDataModuleCreateCommand.DisposeOf;
  FCorrigirTFDQueryCommand.DisposeOf;
  FGetDataHoraServidorCommand.DisposeOf;
  inherited;
end;

function TdmBaseConsultaClient.RetornaDadosConsulta(Filtro: string; const ARequestFilter: string): string;
begin
  if FRetornaDadosConsultaCommand = nil then
  begin
    FRetornaDadosConsultaCommand := FConnection.CreateCommand;
    FRetornaDadosConsultaCommand.RequestType := 'GET';
    FRetornaDadosConsultaCommand.Text := 'TdmBaseConsulta.RetornaDadosConsulta';
    FRetornaDadosConsultaCommand.Prepare(TdmBaseConsulta_RetornaDadosConsulta);
  end;
  FRetornaDadosConsultaCommand.Parameters[0].Value.SetWideString(Filtro);
  FRetornaDadosConsultaCommand.Execute(ARequestFilter);
  Result := FRetornaDadosConsultaCommand.Parameters[1].Value.GetWideString;
end;

procedure TdmBaseConsultaClient.DataModuleCreate(Sender: TObject);
begin
  if FDataModuleCreateCommand = nil then
  begin
    FDataModuleCreateCommand := FConnection.CreateCommand;
    FDataModuleCreateCommand.RequestType := 'POST';
    FDataModuleCreateCommand.Text := 'TdmBaseConsulta."DataModuleCreate"';
    FDataModuleCreateCommand.Prepare(TdmBaseConsulta_DataModuleCreate);
  end;
  if not Assigned(Sender) then
    FDataModuleCreateCommand.Parameters[0].Value.SetNull
  else
  begin
    FMarshal := TDSRestCommand(FDataModuleCreateCommand.Parameters[0].ConnectionHandler).GetJSONMarshaler;
    try
      FDataModuleCreateCommand.Parameters[0].Value.SetJSONValue(FMarshal.Marshal(Sender), True);
      if FInstanceOwner then
        Sender.Free
    finally
      FreeAndNil(FMarshal)
    end
    end;
  FDataModuleCreateCommand.Execute;
end;

procedure TdmBaseConsultaClient.CorrigirTFDQuery;
begin
  if FCorrigirTFDQueryCommand = nil then
  begin
    FCorrigirTFDQueryCommand := FConnection.CreateCommand;
    FCorrigirTFDQueryCommand.RequestType := 'GET';
    FCorrigirTFDQueryCommand.Text := 'TdmBaseConsulta.CorrigirTFDQuery';
  end;
  FCorrigirTFDQueryCommand.Execute;
end;

function TdmBaseConsultaClient.GetDataHoraServidor(const ARequestFilter: string): Double;
begin
  if FGetDataHoraServidorCommand = nil then
  begin
    FGetDataHoraServidorCommand := FConnection.CreateCommand;
    FGetDataHoraServidorCommand.RequestType := 'GET';
    FGetDataHoraServidorCommand.Text := 'TdmBaseConsulta.GetDataHoraServidor';
    FGetDataHoraServidorCommand.Prepare(TdmBaseConsulta_GetDataHoraServidor);
  end;
  FGetDataHoraServidorCommand.Execute(ARequestFilter);
  Result := FGetDataHoraServidorCommand.Parameters[0].Value.GetDouble;
end;

constructor TdmBaseConsultaClient.Create(ARestConnection: TDSRestConnection);
begin
  inherited Create(ARestConnection);
end;

constructor TdmBaseConsultaClient.Create(ARestConnection: TDSRestConnection; AInstanceOwner: Boolean);
begin
  inherited Create(ARestConnection, AInstanceOwner);
end;

destructor TdmBaseConsultaClient.Destroy;
begin
  FRetornaDadosConsultaCommand.DisposeOf;
  FDataModuleCreateCommand.DisposeOf;
  FCorrigirTFDQueryCommand.DisposeOf;
  FGetDataHoraServidorCommand.DisposeOf;
  inherited;
end;

function TdmCadPedidoVendaClient.RetornaNomeCliente(ID: Integer; const ARequestFilter: string): string;
begin
  if FRetornaNomeClienteCommand = nil then
  begin
    FRetornaNomeClienteCommand := FConnection.CreateCommand;
    FRetornaNomeClienteCommand.RequestType := 'GET';
    FRetornaNomeClienteCommand.Text := 'TdmCadPedidoVenda.RetornaNomeCliente';
    FRetornaNomeClienteCommand.Prepare(TdmCadPedidoVenda_RetornaNomeCliente);
  end;
  FRetornaNomeClienteCommand.Parameters[0].Value.SetInt32(ID);
  FRetornaNomeClienteCommand.Execute(ARequestFilter);
  Result := FRetornaNomeClienteCommand.Parameters[1].Value.GetWideString;
end;

function TdmCadPedidoVendaClient.RetornaCadatro(ID: Integer; const ARequestFilter: string): TFDJSONDataSets;
begin
  if FRetornaCadatroCommand = nil then
  begin
    FRetornaCadatroCommand := FConnection.CreateCommand;
    FRetornaCadatroCommand.RequestType := 'GET';
    FRetornaCadatroCommand.Text := 'TdmCadPedidoVenda.RetornaCadatro';
    FRetornaCadatroCommand.Prepare(TdmCadPedidoVenda_RetornaCadatro);
  end;
  FRetornaCadatroCommand.Parameters[0].Value.SetInt32(ID);
  FRetornaCadatroCommand.Execute(ARequestFilter);
  if not FRetornaCadatroCommand.Parameters[1].Value.IsNull then
  begin
    FUnMarshal := TDSRestCommand(FRetornaCadatroCommand.Parameters[1].ConnectionHandler).GetJSONUnMarshaler;
    try
      Result := TFDJSONDataSets(FUnMarshal.UnMarshal(FRetornaCadatroCommand.Parameters[1].Value.GetJSONValue(True)));
      if FInstanceOwner then
        FRetornaCadatroCommand.FreeOnExecute(Result);
    finally
      FreeAndNil(FUnMarshal)
    end
  end
  else
    Result := nil;
end;

function TdmCadPedidoVendaClient.RetornaCadatro_Cache(ID: Integer; const ARequestFilter: string): IDSRestCachedTFDJSONDataSets;
begin
  if FRetornaCadatroCommand_Cache = nil then
  begin
    FRetornaCadatroCommand_Cache := FConnection.CreateCommand;
    FRetornaCadatroCommand_Cache.RequestType := 'GET';
    FRetornaCadatroCommand_Cache.Text := 'TdmCadPedidoVenda.RetornaCadatro';
    FRetornaCadatroCommand_Cache.Prepare(TdmCadPedidoVenda_RetornaCadatro_Cache);
  end;
  FRetornaCadatroCommand_Cache.Parameters[0].Value.SetInt32(ID);
  FRetornaCadatroCommand_Cache.ExecuteCache(ARequestFilter);
  Result := TDSRestCachedTFDJSONDataSets.Create(FRetornaCadatroCommand_Cache.Parameters[1].Value.GetString);
end;

function TdmCadPedidoVendaClient.RetornaCadastros(Where: string; const ARequestFilter: string): TFDJSONDataSets;
begin
  if FRetornaCadastrosCommand = nil then
  begin
    FRetornaCadastrosCommand := FConnection.CreateCommand;
    FRetornaCadastrosCommand.RequestType := 'GET';
    FRetornaCadastrosCommand.Text := 'TdmCadPedidoVenda.RetornaCadastros';
    FRetornaCadastrosCommand.Prepare(TdmCadPedidoVenda_RetornaCadastros);
  end;
  FRetornaCadastrosCommand.Parameters[0].Value.SetWideString(Where);
  FRetornaCadastrosCommand.Execute(ARequestFilter);
  if not FRetornaCadastrosCommand.Parameters[1].Value.IsNull then
  begin
    FUnMarshal := TDSRestCommand(FRetornaCadastrosCommand.Parameters[1].ConnectionHandler).GetJSONUnMarshaler;
    try
      Result := TFDJSONDataSets(FUnMarshal.UnMarshal(FRetornaCadastrosCommand.Parameters[1].Value.GetJSONValue(True)));
      if FInstanceOwner then
        FRetornaCadastrosCommand.FreeOnExecute(Result);
    finally
      FreeAndNil(FUnMarshal)
    end
  end
  else
    Result := nil;
end;

function TdmCadPedidoVendaClient.RetornaCadastros_Cache(Where: string; const ARequestFilter: string): IDSRestCachedTFDJSONDataSets;
begin
  if FRetornaCadastrosCommand_Cache = nil then
  begin
    FRetornaCadastrosCommand_Cache := FConnection.CreateCommand;
    FRetornaCadastrosCommand_Cache.RequestType := 'GET';
    FRetornaCadastrosCommand_Cache.Text := 'TdmCadPedidoVenda.RetornaCadastros';
    FRetornaCadastrosCommand_Cache.Prepare(TdmCadPedidoVenda_RetornaCadastros_Cache);
  end;
  FRetornaCadastrosCommand_Cache.Parameters[0].Value.SetWideString(Where);
  FRetornaCadastrosCommand_Cache.ExecuteCache(ARequestFilter);
  Result := TDSRestCachedTFDJSONDataSets.Create(FRetornaCadastrosCommand_Cache.Parameters[1].Value.GetString);
end;

function TdmCadPedidoVendaClient.updateReqInserirDados(Json: string; const ARequestFilter: string): Boolean;
begin
  if FupdateReqInserirDadosCommand = nil then
  begin
    FupdateReqInserirDadosCommand := FConnection.CreateCommand;
    FupdateReqInserirDadosCommand.RequestType := 'GET';
    FupdateReqInserirDadosCommand.Text := 'TdmCadPedidoVenda.updateReqInserirDados';
    FupdateReqInserirDadosCommand.Prepare(TdmCadPedidoVenda_updateReqInserirDados);
  end;
  FupdateReqInserirDadosCommand.Parameters[0].Value.SetWideString(Json);
  FupdateReqInserirDadosCommand.Execute(ARequestFilter);
  Result := FupdateReqInserirDadosCommand.Parameters[1].Value.GetBoolean;
end;

function TdmCadPedidoVendaClient.updateReqAlterarDados(Json: string; const ARequestFilter: string): Boolean;
begin
  if FupdateReqAlterarDadosCommand = nil then
  begin
    FupdateReqAlterarDadosCommand := FConnection.CreateCommand;
    FupdateReqAlterarDadosCommand.RequestType := 'GET';
    FupdateReqAlterarDadosCommand.Text := 'TdmCadPedidoVenda.updateReqAlterarDados';
    FupdateReqAlterarDadosCommand.Prepare(TdmCadPedidoVenda_updateReqAlterarDados);
  end;
  FupdateReqAlterarDadosCommand.Parameters[0].Value.SetWideString(Json);
  FupdateReqAlterarDadosCommand.Execute(ARequestFilter);
  Result := FupdateReqAlterarDadosCommand.Parameters[1].Value.GetBoolean;
end;

function TdmCadPedidoVendaClient.updateReqExcluirDados(Json: string; const ARequestFilter: string): Boolean;
begin
  if FupdateReqExcluirDadosCommand = nil then
  begin
    FupdateReqExcluirDadosCommand := FConnection.CreateCommand;
    FupdateReqExcluirDadosCommand.RequestType := 'GET';
    FupdateReqExcluirDadosCommand.Text := 'TdmCadPedidoVenda.updateReqExcluirDados';
    FupdateReqExcluirDadosCommand.Prepare(TdmCadPedidoVenda_updateReqExcluirDados);
  end;
  FupdateReqExcluirDadosCommand.Parameters[0].Value.SetWideString(Json);
  FupdateReqExcluirDadosCommand.Execute(ARequestFilter);
  Result := FupdateReqExcluirDadosCommand.Parameters[1].Value.GetBoolean;
end;

procedure TdmCadPedidoVendaClient.DataModuleCreate(Sender: TObject);
begin
  if FDataModuleCreateCommand = nil then
  begin
    FDataModuleCreateCommand := FConnection.CreateCommand;
    FDataModuleCreateCommand.RequestType := 'POST';
    FDataModuleCreateCommand.Text := 'TdmCadPedidoVenda."DataModuleCreate"';
    FDataModuleCreateCommand.Prepare(TdmCadPedidoVenda_DataModuleCreate);
  end;
  if not Assigned(Sender) then
    FDataModuleCreateCommand.Parameters[0].Value.SetNull
  else
  begin
    FMarshal := TDSRestCommand(FDataModuleCreateCommand.Parameters[0].ConnectionHandler).GetJSONMarshaler;
    try
      FDataModuleCreateCommand.Parameters[0].Value.SetJSONValue(FMarshal.Marshal(Sender), True);
      if FInstanceOwner then
        Sender.Free
    finally
      FreeAndNil(FMarshal)
    end
    end;
  FDataModuleCreateCommand.Execute;
end;

procedure TdmCadPedidoVendaClient.CorrigirTFDQuery;
begin
  if FCorrigirTFDQueryCommand = nil then
  begin
    FCorrigirTFDQueryCommand := FConnection.CreateCommand;
    FCorrigirTFDQueryCommand.RequestType := 'GET';
    FCorrigirTFDQueryCommand.Text := 'TdmCadPedidoVenda.CorrigirTFDQuery';
  end;
  FCorrigirTFDQueryCommand.Execute;
end;

function TdmCadPedidoVendaClient.GetDataHoraServidor(const ARequestFilter: string): Double;
begin
  if FGetDataHoraServidorCommand = nil then
  begin
    FGetDataHoraServidorCommand := FConnection.CreateCommand;
    FGetDataHoraServidorCommand.RequestType := 'GET';
    FGetDataHoraServidorCommand.Text := 'TdmCadPedidoVenda.GetDataHoraServidor';
    FGetDataHoraServidorCommand.Prepare(TdmCadPedidoVenda_GetDataHoraServidor);
  end;
  FGetDataHoraServidorCommand.Execute(ARequestFilter);
  Result := FGetDataHoraServidorCommand.Parameters[0].Value.GetDouble;
end;

constructor TdmCadPedidoVendaClient.Create(ARestConnection: TDSRestConnection);
begin
  inherited Create(ARestConnection);
end;

constructor TdmCadPedidoVendaClient.Create(ARestConnection: TDSRestConnection; AInstanceOwner: Boolean);
begin
  inherited Create(ARestConnection, AInstanceOwner);
end;

destructor TdmCadPedidoVendaClient.Destroy;
begin
  FRetornaNomeClienteCommand.DisposeOf;
  FRetornaCadatroCommand.DisposeOf;
  FRetornaCadatroCommand_Cache.DisposeOf;
  FRetornaCadastrosCommand.DisposeOf;
  FRetornaCadastrosCommand_Cache.DisposeOf;
  FupdateReqInserirDadosCommand.DisposeOf;
  FupdateReqAlterarDadosCommand.DisposeOf;
  FupdateReqExcluirDadosCommand.DisposeOf;
  FDataModuleCreateCommand.DisposeOf;
  FCorrigirTFDQueryCommand.DisposeOf;
  FGetDataHoraServidorCommand.DisposeOf;
  inherited;
end;

function TdmConsultaClienteClient.RetornaDadosConsulta(Filtro: string; const ARequestFilter: string): string;
begin
  if FRetornaDadosConsultaCommand = nil then
  begin
    FRetornaDadosConsultaCommand := FConnection.CreateCommand;
    FRetornaDadosConsultaCommand.RequestType := 'GET';
    FRetornaDadosConsultaCommand.Text := 'TdmConsultaCliente.RetornaDadosConsulta';
    FRetornaDadosConsultaCommand.Prepare(TdmConsultaCliente_RetornaDadosConsulta);
  end;
  FRetornaDadosConsultaCommand.Parameters[0].Value.SetWideString(Filtro);
  FRetornaDadosConsultaCommand.Execute(ARequestFilter);
  Result := FRetornaDadosConsultaCommand.Parameters[1].Value.GetWideString;
end;

procedure TdmConsultaClienteClient.DataModuleCreate(Sender: TObject);
begin
  if FDataModuleCreateCommand = nil then
  begin
    FDataModuleCreateCommand := FConnection.CreateCommand;
    FDataModuleCreateCommand.RequestType := 'POST';
    FDataModuleCreateCommand.Text := 'TdmConsultaCliente."DataModuleCreate"';
    FDataModuleCreateCommand.Prepare(TdmConsultaCliente_DataModuleCreate);
  end;
  if not Assigned(Sender) then
    FDataModuleCreateCommand.Parameters[0].Value.SetNull
  else
  begin
    FMarshal := TDSRestCommand(FDataModuleCreateCommand.Parameters[0].ConnectionHandler).GetJSONMarshaler;
    try
      FDataModuleCreateCommand.Parameters[0].Value.SetJSONValue(FMarshal.Marshal(Sender), True);
      if FInstanceOwner then
        Sender.Free
    finally
      FreeAndNil(FMarshal)
    end
    end;
  FDataModuleCreateCommand.Execute;
end;

procedure TdmConsultaClienteClient.CorrigirTFDQuery;
begin
  if FCorrigirTFDQueryCommand = nil then
  begin
    FCorrigirTFDQueryCommand := FConnection.CreateCommand;
    FCorrigirTFDQueryCommand.RequestType := 'GET';
    FCorrigirTFDQueryCommand.Text := 'TdmConsultaCliente.CorrigirTFDQuery';
  end;
  FCorrigirTFDQueryCommand.Execute;
end;

function TdmConsultaClienteClient.GetDataHoraServidor(const ARequestFilter: string): Double;
begin
  if FGetDataHoraServidorCommand = nil then
  begin
    FGetDataHoraServidorCommand := FConnection.CreateCommand;
    FGetDataHoraServidorCommand.RequestType := 'GET';
    FGetDataHoraServidorCommand.Text := 'TdmConsultaCliente.GetDataHoraServidor';
    FGetDataHoraServidorCommand.Prepare(TdmConsultaCliente_GetDataHoraServidor);
  end;
  FGetDataHoraServidorCommand.Execute(ARequestFilter);
  Result := FGetDataHoraServidorCommand.Parameters[0].Value.GetDouble;
end;

constructor TdmConsultaClienteClient.Create(ARestConnection: TDSRestConnection);
begin
  inherited Create(ARestConnection);
end;

constructor TdmConsultaClienteClient.Create(ARestConnection: TDSRestConnection; AInstanceOwner: Boolean);
begin
  inherited Create(ARestConnection, AInstanceOwner);
end;

destructor TdmConsultaClienteClient.Destroy;
begin
  FRetornaDadosConsultaCommand.DisposeOf;
  FDataModuleCreateCommand.DisposeOf;
  FCorrigirTFDQueryCommand.DisposeOf;
  FGetDataHoraServidorCommand.DisposeOf;
  inherited;
end;

function TdmConsultaProdutoClient.RetornaDadosConsulta(Filtro: string; const ARequestFilter: string): string;
begin
  if FRetornaDadosConsultaCommand = nil then
  begin
    FRetornaDadosConsultaCommand := FConnection.CreateCommand;
    FRetornaDadosConsultaCommand.RequestType := 'GET';
    FRetornaDadosConsultaCommand.Text := 'TdmConsultaProduto.RetornaDadosConsulta';
    FRetornaDadosConsultaCommand.Prepare(TdmConsultaProduto_RetornaDadosConsulta);
  end;
  FRetornaDadosConsultaCommand.Parameters[0].Value.SetWideString(Filtro);
  FRetornaDadosConsultaCommand.Execute(ARequestFilter);
  Result := FRetornaDadosConsultaCommand.Parameters[1].Value.GetWideString;
end;

procedure TdmConsultaProdutoClient.DataModuleCreate(Sender: TObject);
begin
  if FDataModuleCreateCommand = nil then
  begin
    FDataModuleCreateCommand := FConnection.CreateCommand;
    FDataModuleCreateCommand.RequestType := 'POST';
    FDataModuleCreateCommand.Text := 'TdmConsultaProduto."DataModuleCreate"';
    FDataModuleCreateCommand.Prepare(TdmConsultaProduto_DataModuleCreate);
  end;
  if not Assigned(Sender) then
    FDataModuleCreateCommand.Parameters[0].Value.SetNull
  else
  begin
    FMarshal := TDSRestCommand(FDataModuleCreateCommand.Parameters[0].ConnectionHandler).GetJSONMarshaler;
    try
      FDataModuleCreateCommand.Parameters[0].Value.SetJSONValue(FMarshal.Marshal(Sender), True);
      if FInstanceOwner then
        Sender.Free
    finally
      FreeAndNil(FMarshal)
    end
    end;
  FDataModuleCreateCommand.Execute;
end;

procedure TdmConsultaProdutoClient.CorrigirTFDQuery;
begin
  if FCorrigirTFDQueryCommand = nil then
  begin
    FCorrigirTFDQueryCommand := FConnection.CreateCommand;
    FCorrigirTFDQueryCommand.RequestType := 'GET';
    FCorrigirTFDQueryCommand.Text := 'TdmConsultaProduto.CorrigirTFDQuery';
  end;
  FCorrigirTFDQueryCommand.Execute;
end;

function TdmConsultaProdutoClient.GetDataHoraServidor(const ARequestFilter: string): Double;
begin
  if FGetDataHoraServidorCommand = nil then
  begin
    FGetDataHoraServidorCommand := FConnection.CreateCommand;
    FGetDataHoraServidorCommand.RequestType := 'GET';
    FGetDataHoraServidorCommand.Text := 'TdmConsultaProduto.GetDataHoraServidor';
    FGetDataHoraServidorCommand.Prepare(TdmConsultaProduto_GetDataHoraServidor);
  end;
  FGetDataHoraServidorCommand.Execute(ARequestFilter);
  Result := FGetDataHoraServidorCommand.Parameters[0].Value.GetDouble;
end;

constructor TdmConsultaProdutoClient.Create(ARestConnection: TDSRestConnection);
begin
  inherited Create(ARestConnection);
end;

constructor TdmConsultaProdutoClient.Create(ARestConnection: TDSRestConnection; AInstanceOwner: Boolean);
begin
  inherited Create(ARestConnection, AInstanceOwner);
end;

destructor TdmConsultaProdutoClient.Destroy;
begin
  FRetornaDadosConsultaCommand.DisposeOf;
  FDataModuleCreateCommand.DisposeOf;
  FCorrigirTFDQueryCommand.DisposeOf;
  FGetDataHoraServidorCommand.DisposeOf;
  inherited;
end;

function TdmInserirProdutoClient.RetornaNomeProduto(ID: Integer; const ARequestFilter: string): string;
begin
  if FRetornaNomeProdutoCommand = nil then
  begin
    FRetornaNomeProdutoCommand := FConnection.CreateCommand;
    FRetornaNomeProdutoCommand.RequestType := 'GET';
    FRetornaNomeProdutoCommand.Text := 'TdmInserirProduto.RetornaNomeProduto';
    FRetornaNomeProdutoCommand.Prepare(TdmInserirProduto_RetornaNomeProduto);
  end;
  FRetornaNomeProdutoCommand.Parameters[0].Value.SetInt32(ID);
  FRetornaNomeProdutoCommand.Execute(ARequestFilter);
  Result := FRetornaNomeProdutoCommand.Parameters[1].Value.GetWideString;
end;

procedure TdmInserirProdutoClient.DataModuleCreate(Sender: TObject);
begin
  if FDataModuleCreateCommand = nil then
  begin
    FDataModuleCreateCommand := FConnection.CreateCommand;
    FDataModuleCreateCommand.RequestType := 'POST';
    FDataModuleCreateCommand.Text := 'TdmInserirProduto."DataModuleCreate"';
    FDataModuleCreateCommand.Prepare(TdmInserirProduto_DataModuleCreate);
  end;
  if not Assigned(Sender) then
    FDataModuleCreateCommand.Parameters[0].Value.SetNull
  else
  begin
    FMarshal := TDSRestCommand(FDataModuleCreateCommand.Parameters[0].ConnectionHandler).GetJSONMarshaler;
    try
      FDataModuleCreateCommand.Parameters[0].Value.SetJSONValue(FMarshal.Marshal(Sender), True);
      if FInstanceOwner then
        Sender.Free
    finally
      FreeAndNil(FMarshal)
    end
    end;
  FDataModuleCreateCommand.Execute;
end;

procedure TdmInserirProdutoClient.CorrigirTFDQuery;
begin
  if FCorrigirTFDQueryCommand = nil then
  begin
    FCorrigirTFDQueryCommand := FConnection.CreateCommand;
    FCorrigirTFDQueryCommand.RequestType := 'GET';
    FCorrigirTFDQueryCommand.Text := 'TdmInserirProduto.CorrigirTFDQuery';
  end;
  FCorrigirTFDQueryCommand.Execute;
end;

function TdmInserirProdutoClient.GetDataHoraServidor(const ARequestFilter: string): Double;
begin
  if FGetDataHoraServidorCommand = nil then
  begin
    FGetDataHoraServidorCommand := FConnection.CreateCommand;
    FGetDataHoraServidorCommand.RequestType := 'GET';
    FGetDataHoraServidorCommand.Text := 'TdmInserirProduto.GetDataHoraServidor';
    FGetDataHoraServidorCommand.Prepare(TdmInserirProduto_GetDataHoraServidor);
  end;
  FGetDataHoraServidorCommand.Execute(ARequestFilter);
  Result := FGetDataHoraServidorCommand.Parameters[0].Value.GetDouble;
end;

constructor TdmInserirProdutoClient.Create(ARestConnection: TDSRestConnection);
begin
  inherited Create(ARestConnection);
end;

constructor TdmInserirProdutoClient.Create(ARestConnection: TDSRestConnection; AInstanceOwner: Boolean);
begin
  inherited Create(ARestConnection, AInstanceOwner);
end;

destructor TdmInserirProdutoClient.Destroy;
begin
  FRetornaNomeProdutoCommand.DisposeOf;
  FDataModuleCreateCommand.DisposeOf;
  FCorrigirTFDQueryCommand.DisposeOf;
  FGetDataHoraServidorCommand.DisposeOf;
  inherited;
end;

end.

