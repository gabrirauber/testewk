unit udmCadPessoa;

interface

uses
  System.SysUtils, System.Classes, udmBaseCadastro, FireDAC.Stan.Intf,
  FireDAC.Stan.Option, FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS,
  FireDAC.Phys.Intf, FireDAC.DApt.Intf, Data.DB, FireDAC.Comp.DataSet,
  FireDAC.Comp.Client, uMethods, udmConexao, Data.FireDACJSONReflect, uClasses,
  rest.Json;

type
  TdmCadPessoa = class(TdmBaseCadastro)
    memEnderecos: TFDMemTable;
  private
    FMethods: TdmCadPessoaClient;
    function getMethods: TdmCadPessoaClient;
    procedure ExcluirEnderecos;
    { Private declarations }
  public
    { Public declarations }
    property Methods: TdmCadPessoaClient read getMethods write FMethods;
    procedure CarregarConsulta(Filtro: String);override;
    procedure CarregarDadosCadastro(IDCadastro: Integer);override;
    procedure ExcluirEndereco;
    procedure InserirEndereco(Endereco: TInserirEndereco; Operacao: TOperacao);
    procedure CancelarEdicao;override;
    procedure SalvarCadastro(Operacao: TOperacao);override;
    procedure ExcluirCadastro;override;
  end;

var
  dmCadPessoa: TdmCadPessoa;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}





{$R *.dfm}

{ TdmCadPessoa }

procedure TdmCadPessoa.CancelarEdicao;
begin
  inherited;
  memEnderecos.Close;
end;

procedure TdmCadPessoa.CarregarConsulta(Filtro: String);
var
  DataSets: TFDJSONDataSets;
  DataSet: TFDDataSet;
begin
  inherited;
  DataSets := Methods.RetornaCadastros(Filtro);
  DataSet := TFDJSONDataSetsReader.GetListValueByName(DataSets, 'qryConsulta');
  memConsulta.Close;
  memConsulta.AppendData(Dataset);

end;

procedure TdmCadPessoa.CarregarDadosCadastro(IDCadastro: Integer);
var
  DataSets: TFDJSONDataSets;
  DataSet: TFDDataSet;
begin
  inherited;
  DataSets := Methods.RetornaCadatro(IDCadastro);
  DataSet := TFDJSONDataSetsReader.GetListValueByName(DataSets,'qryconsulta');
  memCadastro.Close;
  memCadastro.AppendData(DataSet);
  DataSet := TFDJSONDataSetsReader.GetListValueByName(DataSets,'qryendereco');
  memEnderecos.Close;
  memEnderecos.AppendData(DataSet);
  memEnderecos.FieldByName('excluir').ReadOnly := False;
  memEnderecos.FieldByName('excluir').ProviderFlags := [];

  memEnderecos.Filtered := False;
  memEnderecos.Filter := 'excluir = 0';
  memEnderecos.Filtered := True;

end;

procedure TdmCadPessoa.ExcluirCadatro;
var
  ExcluirPessoa: TExcluirPessoa;
begin
   ExcluirPessoa := TExcluirPessoa.Create;
   try
     ExcluirPessoa.IDpessoa := memConsulta.FieldByName('idpessoa').AsInteger;

     Methods.updateReqExcluirDados(TJson.ObjectToJsonString(ExcluirPessoa));
   finally
     ExcluirPessoa.Free;
   end;
end;

procedure TdmCadPessoa.ExcluirEndereco;
begin
  memEnderecos.Edit;
  memEnderecos.FieldByName('excluir').AsInteger := 1;
  memEnderecos.Post;
end;

procedure TdmCadPessoa.ExcluirEnderecos;
var
  ExcluirEndereco: TExcluirEndereco;
begin
  memEnderecos.First;
  while not memEnderecos.Eof do
  begin
     ExcluirEndereco := TExcluirEndereco.Create;
     try
       ExcluirEndereco.IDEndereco := memEnderecos.FieldByName('idendereco').AsInteger;

       Methods.updateReqExcluirDados(TJson.ObjectToJsonString(ExcluirEndereco));
     finally
       ExcluirEndereco.Free;
     end;
    memEnderecos.Next;
  end;
end;

function TdmCadPessoa.getMethods: TdmCadPessoaClient;
begin
  if not Assigned(FMethods) then
    FMethods := TdmCadPessoaClient.Create(dmConexao.rConexao);
  Result := FMethods;
end;

procedure TdmCadPessoa.InserirEndereco(Endereco: TInserirEndereco;
  Operacao: TOperacao);
begin
  if Operacao = toCadastrando then
    memEnderecos.Append
  else
    memEnderecos.Edit;

  memEnderecos.FieldByName('dscep').AsString := Endereco.CEP;
  memEnderecos.FieldByName('nmlogradouro').AsString := Endereco.Logradouro;
  memEnderecos.FieldByName('nmbairro').AsString := Endereco.Bairro;
  memEnderecos.FieldByName('dsuf').AsString := Endereco.UF;
  memEnderecos.FieldByName('nmcidade').AsString := Endereco.Cidade;
  memEnderecos.FieldByName('dscomplemento').AsString := Endereco.complemento;
  memEnderecos.FieldByName('excluir').AsInteger := 0;
  memEnderecos.Post;
end;

procedure TdmCadPessoa.SalvarCadastro(Operacao: TOperacao);
var
  DadosInsercao: TInserirPessoa;
  DadosAlterar: TAlterarPessoa;
  Enderecos: TListaInserirEndereco;
  EnderecosAlterar: TListaAlterarEndereco;
  I: Integer;
begin
  if Operacao = toCadastrando then
  begin
    DadosInsercao := TInserirPessoa.Create;
    try
      DadosInsercao.PrimeiroNome := memCadastro.FieldByName('nmprimeiro').AsString;
      DadosInsercao.SegundoNome := memCadastro.FieldByName('nmsegundo').AsString;
      DadosInsercao.Documento := memCadastro.FieldByName('dsdocumento').AsString;
      DadosInsercao.Natureza := memCadastro.FieldByName('flnatureza').AsInteger;
      Enderecos := DadosInsercao.Enderecos;
      SetLength(Enderecos, memEnderecos.RecordCount);

      memEnderecos.First;
      I := 0;
      while not memEnderecos.Eof do
      begin
        Enderecos[I] := TInserirEndereco.Create;
        Enderecos[I].CEP := memEnderecos.FieldByName('dscep').AsString;
        Enderecos[I].UF := memEnderecos.FieldByName('dsuf').AsString;
        Enderecos[I].Cidade := memEnderecos.FieldByName('nmcidade').AsString;
        Enderecos[I].Bairro := memEnderecos.FieldByName('nmbairro').AsString;
        Enderecos[I].Logradouro := memEnderecos.FieldByName('nmlogradouro').AsString;
        Enderecos[I].complemento := memEnderecos.FieldByName('dscomplemento').AsString;
        memEnderecos.Next;
        inc(I);
      end;
      Methods.updateReqInserirDados(TJson.ObjectToJsonString(DadosInsercao));
    finally
      DadosInsercao.Free;
    end;
  end
  else
  begin
    memEnderecos.Filtered := False;
    memEnderecos.Filter := 'excluir = 1';
    memEnderecos.Filtered := True;
    if memEnderecos.RecordCount > 0 then
      ExcluirEnderecos;

    memEnderecos.Filtered := False;
    memEnderecos.Filter := 'excluir = 0';
    memEnderecos.Filtered := True;
    DadosAlterar := TAlterarPessoa.Create;
    try
      DadosAlterar.IDPessoa :=  memCadastro.FieldByName('idpessoa').AsInteger;
      DadosAlterar.PrimeiroNome := memCadastro.FieldByName('nmprimeiro').AsString;
      DadosAlterar.SegundoNome := memCadastro.FieldByName('nmsegundo').AsString;
      DadosAlterar.Documento := memCadastro.FieldByName('dsdocumento').AsString;
      DadosAlterar.Natureza := memCadastro.FieldByName('flnatureza').AsInteger;
      EnderecosAlterar := DadosAlterar.Enderecos;
      SetLength(EnderecosAlterar, memEnderecos.RecordCount);

      memEnderecos.First;
      I := 0;
      while not memEnderecos.Eof do
      begin
        EnderecosAlterar[I] := TAlterarEndereco.Create;
        EnderecosAlterar[I].IDEndereco := memEnderecos.FieldByName('idendereco').AsInteger;
        EnderecosAlterar[I].CEP := memEnderecos.FieldByName('dscep').AsString;
        EnderecosAlterar[I].UF := memEnderecos.FieldByName('dsuf').AsString;
        EnderecosAlterar[I].Cidade := memEnderecos.FieldByName('nmcidade').AsString;
        EnderecosAlterar[I].Bairro := memEnderecos.FieldByName('nmbairro').AsString;
        EnderecosAlterar[I].Logradouro := memEnderecos.FieldByName('nmlogradouro').AsString;
        EnderecosAlterar[I].complemento := memEnderecos.FieldByName('dscomplemento').AsString;
        memEnderecos.Next;
        inc(I);
      end;
      DadosAlterar.Enderecos := EnderecosAlterar;
      Methods.updateReqAlterarDados(TJson.ObjectToJsonString(DadosAlterar));
    finally
      DadosInsercao.Free;
    end;
  end;
end;

end.
