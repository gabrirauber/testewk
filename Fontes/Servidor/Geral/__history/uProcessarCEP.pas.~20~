unit uProcessarCEP;

interface

uses
  System.Classes, SysUtils, udmConexao, uClasses, Data.DB, FireDAC.Comp.DataSet,
  FireDAC.Comp.Client, uManagerSession, uWsViaCEP;

type
  TProcessarCEPThread = class(TThread)
  private
    FqryConsulta: TFDQuery;
    FqryCadastro: TFDQuery;
    function getqryConsulta: TFDQuery;
    function getqryCadastro: TFDQuery;
    function ConsultarEndereco: TInserirEndereco;
    procedure CadastrarEndereco(DadosEndereco: TInserirEndereco);
  protected
    procedure Execute; override;
  public
    constructor Create;
    destructor Destroy; override;
    property qryConsulta: TFDQuery read getqryConsulta write FqryConsulta;
    property qryCadastro: TFDQuery read getqryCadastro write FqryCadastro;
  end;


implementation

{ TProcessarCEPThread }

procedure TProcessarCEPThread.CadastrarEndereco(
  DadosEndereco: TInserirEndereco);
begin
  qryCadastro.Append;
  qryCadastro.Append;
  qryCadastro.FieldByName('dsuf').AsString := DadosEndereco.UF;
  qryCadastro.FieldByName('idendereco').AsInteger := qryConsulta.FieldByName('idendereco').AsInteger;
  qryCadastro.FieldByName('nmcidade').AsString := DadosEndereco.Cidade;
  qryCadastro.FieldByName('nmbairro').AsString := DadosEndereco.Bairro;
  qryCadastro.FieldByName('nmlogradouro').AsString := DadosEndereco.Logradouro;
  qryCadastro.FieldByName('dscomplemento').AsString := DadosEndereco.complemento;
  qryCadastro.ApplyUpdates();
end;

function TProcessarCEPThread.ConsultarEndereco: TInserirEndereco;
var
  Consulta: TConsultaCEP;
begin
  Consulta := TConsultaCEP.Create;
  try
    Result := Consulta.ConsultaCEP(qryConsulta.FieldByName('dscep').AsString);
  finally
    Consulta.Free;
  end;
end;

constructor TProcessarCEPThread.Create;
begin
  inherited Create(True);
end;

destructor TProcessarCEPThread.Destroy;
begin
  if Assigned(FqryConsulta) then
    FqryConsulta.Free;
  if Assigned(FqryCadastro) then
    qryCadastro.Free;
  inherited;
end;

procedure TProcessarCEPThread.Execute;
var
  DadosEndereco: TInserirEndereco;
begin
  inherited;
  while not Terminated do
  begin
    Sleep(500);
    qryConsulta.Open('SELECT * ' +
                     ' FROM ENDERECO' +
                     ' WHERE IDENDERECO NOT IN (SELECT IDENDERECO' +
                     '                          FROM ENDERECO_INTEGRACAO) LIMIT 50');
    qryConsulta.First;
    while not qryConsulta.Eof do
    begin
      DadosEndereco := ConsultarEndereco;
      if Assigned(DadosEndereco) then
        CadastrarEndereco(DadosEndereco);
      qryConsulta.Next;
    end;
  end;

end;

function TProcessarCEPThread.getqryCadastro: TFDQuery;
begin
  if not Assigned(FqryCadastro) then
  begin
    FqryCadastro := TFDQuery.Create(nil);
    FqryCadastro.Connection := TConnectionManager.GetDMConexao.fdConexao;
    FqryCadastro.CachedUpdates := True;
    FqryCadastro.Open('SELECT * FROM ENDERECO_INTEGRACAO WHERE 1=0');
  end;
  Result := FqryCadastro;
end;

function TProcessarCEPThread.getqryConsulta: TFDQuery;
begin
  if not Assigned(FqryConsulta) then
  begin
    FqryConsulta := TFDQuery.Create(nil);
    FqryConsulta.Connection := TConnectionManager.GetDMConexao.fdConexao;
    FqryConsulta.CachedUpdates := True;
  end;

  Result := FqryConsulta;
end;

end.
